oktatás git linkje a tanár órai munkáival:
https://github.com/Training360/java-bgn-2022-05-30.git
ezt is csekkold: https://github.com/Training360/java-bsc-public
UMLet free uml szerkesztő program

a jobb alsó properties részen lehet gyorsan írni , -- és tab használatábal, a rajzolást rendesen csinálja
UML-ben nem minden osztályt kell leírni, csak a legfontosabbakat (mondjuk max tíz)


minden egyes típusnak van eyg statikus metódusa, ami átalakítja egyikből a másikba: parse
pl: Integer.parseInt()

Az enum olyan osztály, melynek elemei statikus példányúak, és előre megadottak.

enumba lehet attribútumokat fölvenni

tesztek:
pomba fel kell venni a jupiter motort,
ne az src-be, hanem a teszt mappába tedd a teszteket.
Alt enterrel lehet osztályhoz tesztet létrehozni
@DisplayName("amit kiír balra, szépen")
@TestMethodOrder(MethodOrderer.Random.class)

teszteknél kisbetűs név, szóköz helyett alulvonás
assertEquals -> String.equals()
assertSame -> érték alapú egyenlőség

Előfeltételeket:
@BeforeEach
//és ide létrehozom, amit akarok

metódusból null-t nem adunk vissza, vagy
1) kivétel kezelés
2) nullobjektet adunk vissza (új objekt, null értékekkel)
3) "Optional"-t adunk vissza

Optional<String> name = Optional.of("John Doe"); // ha teli
Optional<String> nobody = Optional.empty(); // ha üres

használat előtt:
if(nobody.isPresent()){
//do stuff
} else {
    System.out.println("nincs értéke!");
}

lambda:
nobody.ifPresent(n -> System.out.pritnln(n);

Delegálás - amikor a belsőbb osztálynak adja át a feladatot.
//this.functionA(){ return Other.functionA(); }

feladat
    protokoll, ://, domain név, pass, paraméterek (név/értékpárok)
    URL osztály
    a konstruktor egy url stringet kap, ezt bontsuk fel, és tegyük getter metódusokra
péééélda (incomplete):
https://github.com/vicziani/jtechlog-java-roadmap

//megkaptam, hogy bár oké, ahogy csináltam, jobb lett volna Scanner objektummal végigfutni rajta, alkalmasint useDelimiter()-t alkalmazni rajta

throws Exception-ra tesztestet:
@Test
void testCreateWithEmptyName(){
    IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,
    () -> new Employee(""));
assertEquals("Name can not be empty!", exception.getMessage();
}

Clean code szabály: konstruktoban, vagy metódusban bepasszolt boolean helyett használjunk enum-ot!

kiírás: Files.write(Paths.get("names.txt"), <beadott szöveg>);
kiírás tesztelése: @TempDir

Fluent API // void helyett return this -  így sorra önmagára hívásláncot lehet csinálni.

attributum + (getter + setter) = property


sima

{
 System.out.println("Inicializátor blokk, a konstruktor előtt fut le");
}

esetén ez a klasszik nemhasznált cucc

Kompozíció/Inheritance
Az öröklődés kezd elavult tech lenni, inkább a kompozíció felé megy az ipar, mi szerint a használni kívánt ősosztályt példányosítja az attribútumok között.
Főleg azért avul el, mert futás közbena z öröklött őst nem lehet változtatni - ellenben a kompozíció tagjaival.

Interface: csak absztrakt metódusok vannak benne

statikus típus - dinamikus típus
értékadáskor:
List<> l = new ArrayList<>();
<statikus típus > = <dinamikus típus>
a statikus nem változik, és a dinamikus típusnak vagy őse, vagy önmaga
a dinamikus tipus változhat, akár futás közben is, amennyiben a benne levő adatok konvertálhatóak (vagy ha üres);

az így példányosított (inicializált) objektumra CSAK a statikus típus metódusait lehet hívni....
<<<private>protected>public>
leszármazottban az @Override-olt metódus publikussági módosítója csak azonos, vagy nyíltabb körű lehet, szűkebb nem
Overrideolni lehet a visszatérési típust is, az ős leszármazottjára, ha szüksége van rá (pl: copy());

abstrakt class = van konstruktor
interface = nincs konstruktor;

Marker interface = olyan interface, aminek nincs metódusa
//ritkánhasznált

final - nem lehet leszármaztatni, ha osztályról van szó
egy osztály több interface-t is implementálhat

instanceof operátor
megvizsgálja, hogy az adott változó dinamikus típusa milyen kapcsolatban áll a jobb oldali arggal
car instanceof vehicle //true
car instanceof bicycle // false
//két objektumot hasonlít össze

egy interface több interface-t is kiterjeszthet
(extends) ... interfészek között töbszörös öröklődés van

Default interface metódus
ha default kulcsszóval látjuk el, onnantól kezdve lehet implementációja a metódusnak az interface-en belül.
default int getBasePrice(){
return 0;
}

Multicatch úgy működik, hogy |
minthogy: catch (IllegalStateException | IllegalArgumentException e){{}

try-with-resources

try(<resources, eg: scanner>){
    String first = scanner.nextLine() etc...
} catch (IOE e){
}
