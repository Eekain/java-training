 var - java9 óta
 var names = new ArrayList<String>(); //ha a statikus típusban nincs meghatározva, akkor a dinamikus típusban kell megadni a diamond operátorban a kezelt objektumtípust
 var-t csak lokális változóknál illik használni
 ###gyors összefoglaló volt a múlt heti basic alatt
 hétfő déllelőtt: projektfeladat

read in from CSV file for tutors and subjects...?
name, subject
XY | physics
remove studentnél paraméterül a nevet használjuk
findstudentbyname: ha nincs, optionalt return

teszt...
a nyilak meghívást (általában lista formában) jelentenek

a konstruktor után a metódusok sorrendje a hívás sorrendjében legyen

dependency injection

removeStudent: nemm fogja megtalálni a students.contain után közvetlenül a students.remove, mert másik dologra keres a heap-en
DTO: data transfer object - új objektum, amibe bemásoljuk az entitás adatait, és azzal térünk vissza.

ha nem írsz unit testet akkor az nem refraktorálás

Anonymous inner class
Comparator, név nélküli belsőosztálypéldányosítás
AWG/Swing eseménykezelőknél

ott használhatunk lambda interfészeket, ahol a háttérben az interfésznek egy, és csakis egy metódusa van

referenciatípusú változó = osztály, vagy interfész

Kollekcióknál gyorsítja a keresést a hash használata

Set: (interfész)
 a {halmaz} nem enged duplikációt a listával ellentétben
 nincs sorrend, ellentétben a listával

 ha két objektum equals, akkor a hashkódja ugyanaz kell, hogy legyen.
 hashből max int határértéken belüli érték lehet, mert intet ad vissza az algoritmus

 ha felülírod az equals metódust, akkor fel kell írni a hash metódust is.

Adatszerkezetek
A LinkedList nemcsak a List intefészt implementálja (mint az ArrayList), hanem a Queue interfészt is.
LinkedHashSet - alapjában véve egy hashset, azonban az elemeket egy kétirányba tárolt listába is felfűzi
megtartja a berakás sorrrendjét

Java nyelven van a Deque (dekk) interfész, ami a queue interface leszármazottja, ami egy kétvégű sor, aminek mindkét végéhez hozzá lehet férni.... ezt használjuk verem helyett

ArrayDeque - a stack (és deque) implementálása.

Map: egy interfész, különböző implementációkkal

kollekciók tesztelését különösen támogatja a library: AssertJ

foreach az olvasásra szolgál, módosítást Iterator-os bejárásnál lehet.

comparator/comparable

ha nincs megadva comparator (tehát comparable alapján történik a rendezés) akkor a "Natural order" alapján történik rendezés


COLLATOR
Collections.sort(names, Collator.getInstance(new Locale("hu","HU")));
//így magyar lokále alapján rendez

Collections.osztály
statikus metódusok gyűjteménye
unmodifyable - egy módosíthatatlan nézetét adja vissza az osztálynak.

shallow copy:
referfenciát másol
deep copy:
új objektumot hoz létre, eredeti értékeivel


lambda
ötlet: át lehessen adni fügvényt paraméterként
names.forEach((String name) -> {System.out.println(name);});
//VAGY
names.forEach(name ->System.out.println(name));

names.replaceAll(name -> na,me.toUpperCase());
names.replaceAll(String::toUpperCase);
a lambda kifejezések mögött mindíg olyan interfész van, amiben csak egy metódus van





forEach      Egy object a paraméter, void a visszatérési típus : Consumer
replaceAll   Egy object paraméter, azonos típusú visszatérés: UnaryOperator
removeIf     Egy object paraméter, logikai érték visszatérés: Predicate

(68 funkcionális interfész van a Java nyelvben)

streamek
forrás (1) - közbülső elemek (x) - záró elem (1);

funkcionális programozás
nem az objektum az alap, hanem a függvény:
a függvényeket lehet kezelni,

Supplier : in: void; out : T
Consumer : in: T; out: void
BiConsumer: in: T, U; out : void
Predicate: in: T,; out : boolean
BiPredicate: in: T, U; out : boolean
Function: in: T; out: U
BiFunction: in: T, U; out: R
UnaryOperator: in: T, out: T
BinaryOperator: in: T, T; out: T

A főbb funkcionális interfészek (lambdában használhatók) ezek közé tartoznak.

Big data: ahol egy számítógép már nem elég az adatok feldolgozására.

záró műveletek
count
min/max
findany/findfirst
allmatch/anymatch/nonematch
foreach
reduce
collect


Collectors


(CounterResult::new, CounterResult::accept, CounterResult::addAll)
a  kollektor ezt egyszerűsíti, hiszen tartalmazza mindhárom összetevőt

előre definiált collectorok:
String: joining
Matematikai: avg, count, max, min, sum, summarize

Files.lines = file-ból streamek

Pattern pattern = Pattern.compile("href=\"([^\"]+)\"");
Matcher matcher = pattern.matcher("""
        bodyContentMeghivo = 'Nyilatkozatot, bejelentést, vagy felhasználási kérelmet készül küldeni a(z) <strong><a href="mailto:{emailAddress}" target="_blank" class="email">{emailShow}</a></strong> címen a lapigazgatónak.Fontos nekünk, ezért az adataira is nagyon vigyázunk, ahogy az <a href="https://index.hu/adatvedelem" target="_blank">adatvédelmi tájékoztatónkban</a> részletezzük is. Ha Önnek is oké, kattintson az OK gombra.'
        """);



kollekciót kibontani streambe: flatMap(l -> getLinkWithRegexp(l).stream())
int x = switch(i){
...
}
//viszonylag új viselkedés, hogy ezzel is lehet adni értéket


Clock-ot általában tesztelésnél használjuk:
Clock clock = Clock.fixed(2019, 1, 1, 0, 0, 0).atZone(ZoneId.systzemDefault()).toIntsant(), ZoneId.systemDefault());
LocalDateTime nowWithClock = new LocalDateTime.now(clock); // ezzel meg lehet adni egy időt, ami nem a valódi idó

I18n
//internationalization - 18 karakter az i és az n között

az a módszer, mely lehetővé teszi többnyelvű alkalmazások fejlesztését

resource bundle
a resources könyvtárba kell tenni

 resuource format, message format
 //ritkán használt

 interfész a naplózásra:
 slf4j
 ennek implementciói:
   - log4j //elavult, meg...kínos
   - Logback
   - Apache commons logging
   - java.util.Logging

IO kezelések:
                Bináris | Szöveges
Írás:       OutputStream    Writer
Olvasás:    InputStream     Reader
